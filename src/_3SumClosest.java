import java.util.Arrays;

public class _3SumClosest {

    public static void main(String[] args) {
//        int res = new Solution().threeSumClosest(new int[]{-1, 2, 1, -4}, 1);
//        int res = new Solution().threeSumClosest(new int[]{4, 0, 5, -5, 3, 3, 0, -4, -5}, -2);
//        int res = new Solution().threeSumClosest(new int[]{-13,592,-501,770,-952,-675,322,-829,-246,657,608,485,-112,967,-30,182,-969,559,-286,-64,24,365,-158,701,535,-429,-217,28,948,-114,-536,-711,693,23,-958,-283,-700,-672,311,314,-712,-594,-351,658,747,949,70,888,166,495,244,-380,-654,454,-281,-811,-168,-839,-106,877,-216,523,-234,-8,289,-175,920,-237,-791,-976,-509,-4,-3,298,-190,194,-328,265,150,210,285,-176,-646,-465,-97,-107,668,892,612,-54,-272,-910,557,-212,-930,-198,38,-365,-729,-410,932,4,-565,-329,-456,224,443,-529,-428,-294,191,229,112,-867,-163,-979,236,-227,-388,-209,984,188,-549,970,951,-119,-146,801,-554,564,-769,334,-819,-356,-724,-219,527,-405,-27,-759,722,-774,758,394,146,517,870,-208,742,-782,336,-364,-558,-417,663,-914,536,293,-818,847,-322,408,876,-823,827,167}, 7175);
//        int res1 = new Solution().threeSumClosest(new int[]{13, 252, -87, -431, -148, 387, -290, 572, -311, -721, 222, 673, 538, 919, 483, -128, -518, 7, -36, -840, 233, -184, -541, 522, -162, 127, -935, -397, 761, 903, -217, 543, 906, -503, -826, -342, 599, -726, 960, -235, 436, -91, -511, -793, -658, -143, -524, -609, -728, -734, 273, -19, -10, 630, -294, -453, 149, -581, -405, 984, 154, -968, 623, -631, 384, -825, 308, 779, -7, 617, 221, 394, 151, -282, 472, 332, -5, -509, 611, -116, 113, 672, -497, -182, 307, -592, 925, 766, -62, 237, -8, 789, 318, -314, -792, -632, -781, 375, 939, -304, -149, 544, -742, 663, 484, 802, 616, 501, -269, -458, -763, -950, -390, -816, 683, -219, 381, 478, -129, 602, -931, 128, 502, 508, -565, -243, -695, -943, -987, -692, 346, -13, -225, -740, -441, -112, 658, 855, -531, 542, 839, 795, -664, 404, -844, -164, -709, 167, 953, -941, -848, 211, -75, 792, -208, 569, -647, -714, -76, -603, -852, -665, -897, -627, 123, -177, -35, -519, -241, -711, -74, 420, -2, -101, 715, 708, 256, -307, 466, -602, -636, 990, 857, 70, 590, -4, 610, -151, 196, -981, 385, -689, -617, 827, 360, -959, -289, 620, 933, -522, 597, -667, -882, 524, 181, -854, 275, -600, 453, -942, 134}, -2805);
//        int res2 = new SolutionSample().threeSumClosest(new int[]{13, 252, -87, -431, -148, 387, -290, 572, -311, -721, 222, 673, 538, 919, 483, -128, -518, 7, -36, -840, 233, -184, -541, 522, -162, 127, -935, -397, 761, 903, -217, 543, 906, -503, -826, -342, 599, -726, 960, -235, 436, -91, -511, -793, -658, -143, -524, -609, -728, -734, 273, -19, -10, 630, -294, -453, 149, -581, -405, 984, 154, -968, 623, -631, 384, -825, 308, 779, -7, 617, 221, 394, 151, -282, 472, 332, -5, -509, 611, -116, 113, 672, -497, -182, 307, -592, 925, 766, -62, 237, -8, 789, 318, -314, -792, -632, -781, 375, 939, -304, -149, 544, -742, 663, 484, 802, 616, 501, -269, -458, -763, -950, -390, -816, 683, -219, 381, 478, -129, 602, -931, 128, 502, 508, -565, -243, -695, -943, -987, -692, 346, -13, -225, -740, -441, -112, 658, 855, -531, 542, 839, 795, -664, 404, -844, -164, -709, 167, 953, -941, -848, 211, -75, 792, -208, 569, -647, -714, -76, -603, -852, -665, -897, -627, 123, -177, -35, -519, -241, -711, -74, 420, -2, -101, 715, 708, 256, -307, 466, -602, -636, 990, 857, 70, 590, -4, 610, -151, 196, -981, 385, -689, -617, 827, 360, -959, -289, 620, 933, -522, 597, -667, -882, 524, 181, -854, 275, -600, 453, -942, 134}, -2805);
        int res1 = new Solution().threeSumClosest(new int[]{-13, 592, -501, 770, -952, -675, 322, -829, -246, 657, 608, 485, -112, 967, -30, 182, -969, 559, -286, -64, 24, 365, -158, 701, 535, -429, -217, 28, 948, -114, -536, -711, 693, 23, -958, -283, -700, -672, 311, 314, -712, -594, -351, 658, 747, 949, 70, 888, 166, 495, 244, -380, -654, 454, -281, -811, -168, -839, -106, 877, -216, 523, -234, -8, 289, -175, 920, -237, -791, -976, -509, -4, -3, 298, -190, 194, -328, 265, 150, 210, 285, -176, -646, -465, -97, -107, 668, 892, 612, -54, -272, -910, 557, -212, -930, -198, 38, -365, -729, -410, 932, 4, -565, -329, -456, 224, 443, -529, -428, -294, 191, 229, 112, -867, -163, -979, 236, -227, -388, -209, 984, 188, -549, 970, 951, -119, -146, 801, -554, 564, -769, 334, -819, -356, -724, -219, 527, -405, -27, -759, 722, -774, 758, 394, 146, 517, 870, -208, 742, -782, 336, -364, -558, -417, 663, -914, 536, 293, -818, 847, -322, 408, 876, -823, 827, 167}, 7175);
        int res2 = new SolutionSample().threeSumClosest(new int[]{-13, 592, -501, 770, -952, -675, 322, -829, -246, 657, 608, 485, -112, 967, -30, 182, -969, 559, -286, -64, 24, 365, -158, 701, 535, -429, -217, 28, 948, -114, -536, -711, 693, 23, -958, -283, -700, -672, 311, 314, -712, -594, -351, 658, 747, 949, 70, 888, 166, 495, 244, -380, -654, 454, -281, -811, -168, -839, -106, 877, -216, 523, -234, -8, 289, -175, 920, -237, -791, -976, -509, -4, -3, 298, -190, 194, -328, 265, 150, 210, 285, -176, -646, -465, -97, -107, 668, 892, 612, -54, -272, -910, 557, -212, -930, -198, 38, -365, -729, -410, 932, 4, -565, -329, -456, 224, 443, -529, -428, -294, 191, 229, 112, -867, -163, -979, 236, -227, -388, -209, 984, 188, -549, 970, 951, -119, -146, 801, -554, 564, -769, 334, -819, -356, -724, -219, 527, -405, -27, -759, 722, -774, 758, 394, 146, 517, 870, -208, 742, -782, 336, -364, -558, -417, 663, -914, 536, 293, -818, 847, -322, 408, 876, -823, 827, 167}, 7175);
//        int res = new Solution().threeSumClosest(new int[]{0, 0, 0}, 1);
        System.out.println(res1);
        System.out.println(res2);

    }

    static class Solution {
        public int threeSumClosest(int[] nums, int target) {
            Arrays.sort(nums);
            int defaultValue = 100000;
            int res = defaultValue;
            int len = nums.length;

            for (int i = 0; i < len - 1; i++) {
                int cur = nums[i];

                int p = i + 1;
                int q = len - 1;

                int temp = defaultValue;
                while (p < q) {
                    int sum = cur + nums[p] + nums[q];
                    int diff = sum - target;

                    if (diff == 0) {
                        return sum;
                    }

                    if (Math.abs(temp - target) >= Math.abs(sum - target)) {
                        temp = sum;
                    }

                    if (diff < 0) {
                        p++;
                    } else {
                        q--;
                    }
                }

                if (Math.abs(temp - target) < Math.abs(res - target)) {
                    res = temp;
                }
            }

            return res;
        }
    }

    static class SolutionSample {
        public int threeSumClosest(int[] nums, int t) {
            if (nums.length < 44)
                java.util.Arrays.sort(nums);
            else {
                byte[] a = new byte[2001];
                for (int v : nums)
                    a[v + 1000]++;
                for (int z = 0, c = 0; z < 2001; ++z) {
                    int w = a[z];
                    while (w-- != 0)
                        nums[c++] = z - 1000;
                }
            }

            int i = 0, n = nums.length - 1;


            for (int min = t - nums[n - 1] - nums[n], end = n - 2; i < end && nums[i] <= min; ++i) {
            }

            for (int max = t - nums[i] - nums[i + 1], end = i + 2; n > end && nums[n] >= max; --n) {
            }

            int minAbs = 0x7fffffff, minSum = 0;
            for (int end = n - 1; i < end; ++i) {
                int num_i = nums[i];

                for (int j = i + 1, k = n; j < k; ) {
                    int sum = num_i + nums[j] + nums[k];
                    if (sum == t)
                        return sum;

                    int abs;
                    if (sum > t) {
                        abs = sum - t;
                        k--;
                    } else {
                        abs = t - sum;
                        j++;
                    }
                    if (abs < minAbs) {
                        minAbs = abs;
                        minSum = sum;
                    }
                }
            }
            return minSum;
        }
    }

    static class Solution1 {
        public int threeSumClosest(int[] nums, int target) {
            Arrays.sort(nums);
            int[] res = new int[3];

            int len = nums.length;
            for (int i = 0; i < len; i++) {
                if (i == len - 1) {
                    return nums[len - 1] + nums[len - 2] + nums[len - 3];
                }

                int diff = nums[i] - target;
                if (diff >= 0 || diff == target * 2) {
                    if (i == 0) {
                        return nums[0] + nums[1] + nums[2];
                    }


                    int j = i - 1;
                    int k = i;
                    int l = 0;

                    while (l < 3) {
                        if (k >= len) {
                            res[l] = nums[j--];
                        } else if (j < 0) {
                            res[l] = nums[k++];
                        } else {
                            int q = Math.abs(nums[j] - target);
                            int p = Math.abs(nums[k] - target);
                            if (q < p) {
                                res[l] = nums[j];
                                j--;
                            } else {
                                res[l] = nums[k];
                                k++;
                            }
                        }
                        l++;
                    }

                    break;
                }
            }

            return res[0] + res[1] + res[2];
        }
    }
}
